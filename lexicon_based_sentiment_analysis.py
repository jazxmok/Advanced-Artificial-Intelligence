# -*- coding: utf-8 -*-
"""lexicon based sentiment analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gLOIAVrvxcCkFrMYxi8ckF_tSnPI5LRG

TEXT BLOOB
"""

from textblob import TextBlob
input_text = 'this is worst'
result = TextBlob(input_text)
result.sentiment.polarity
if result.sentiment.polarity > 0:
    print('positive')
elif result.sentiment.polarity == 0:
    print('neutral')
else:
    print('negative')

"""VADER"""

!pip install vaderSentiment
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
sentiment = SentimentIntensityAnalyzer()
text = ':D'
result = sentiment.polarity_scores(text)
print(result)

"""FLAIR"""

!pip install flair
from flair.models import TextClassifier
from flair.data import Sentence
classifier = TextClassifier.load('en-sentiment')
sentence = Sentence('The food was great!')
classifier.predict(sentence)

#print sentence with predicted labels
print('Sentence above is: ', sentence.labels)

"""EXAMPLE ACTUAL DATASET"""

import pandas as pd
from textblob import TextBlob
# Correct the file path to the raw CSV data
df = pd.read_csv("https://raw.githubusercontent.com/mohitgupta-1O1/Kaggle-SMS-Spam-Collection-Dataset-/refs/heads/master/spam.csv", encoding='latin-1')
df = df[['v1','v2']]
df_polarity = []
for text in df['v2']:
  result = TextBlob(text)
  # df_polarity.append(result.sentiment.polarity)
  if result.sentiment.polarity > 0:
      # print('ham')
      df_polarity.append('ham')
  elif result.sentiment.polarity == 0:
      # print('spam')
      df_polarity.append('spam')
  else:
      df_polarity.append('ham')
df.rename(columns={'v1': 'actual', 'v2': 'text'}, inplace=True)
from sklearn.metrics import accuracy_score
df['predicted'] = df_polarity
# Calculate accuracy using Scikit-Learn
accuracy = accuracy_score(df['actual'], df['predicted'])
error = 1 - accuracy
# Display accuracy and error
print(f"Accuracy: {accuracy * 100:.2f}%")
print(f'Error: {error:.2f}')